import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
/*
Map이란 키-값(Key - Value)의 쌍을 저장하는 자료 구조이다.
키는 맵 내에서 유일해야하고 키를 통해 값을 빠르게 검색 할 수 있다.
키는 중복될 수 없지만, 값은 중복될 수 있다.
Map은 순서를 유지하지 않는다.

[활용]
키 목록 조회
Set<String> ketSet = studentMap.ketSet();
Map 의 키는 중복을 허용하지 않는다. 따라서 Map 의 모든 키 목록을 조회하는 keySet() 을 호출하면,
중복을 허용하지 않는 자료 구조인 Set 을 반환한다.

Entry
Set<Map.Entry<String, Integer>> entries = studentMap.entrySet();
Map은 키-값의 쌍을 이루는 자료구조이므로 두 값을 둘 다 저장할 때 Entry를 사용한다
Entry를 사용하면 Entry객체를 만들어 저장한다. Entry객체는 키와 값을 둘 다 젖아한다
맵과 엔트리는 다른거다 Entry는 그냥 키랑 값이 저장되는 객체다 맵은 엔트리를 여러개 가질 수 있다

값 목록 조회
Collection<Integer> values = studentMap.values()
Map 의 값 목록은 중복을 허용한다. 따라서 중복을 허용하지 않는 Set 으로 반환할 수는 없다. 그리고 입력 순서를 보
장하지 않기 때문에 순서를 보장하는 List 로 반환하기도 애매하다. 따라서 단순히 값의 모음이라는 의미의 상위 인터
페이스인 Collection 으로 반환한다.

Map vs Set
Map의 키는 Set과 같은 구조이다. 
Map과 Set은 거의 같다 단지 옆에 value가 있나 없나의 차이이다.
이런 이유로 Map의 구조체는 Set과 굉장히 유사하다(둘 다 Tree, Hash, LinkedHash를 구조체로 가진다)

 */
public class MapMain1 {
    public static void main(String[] args) {
        
        Map<String, Intege> studentMap = new HashMap<>();

        //학생 성적 데이터 추가
        studentMap.put("studentA",90);
        studentMap.put("studentB",80);
        studentMap.put("studentC",80);
        studentMap.put("studentD",100);
        System.out.println(studentMap);

        //특정 학생의 값 조회
        Integer result = studentMap.get("studentA");
        System.out.println("result = "+ result);


        System.out.println("keySet 활용");
        Set<String> keySet = studentMap.keySet;

        for (String key : keySet) {
            Integer value = studentMap.get(key);
            System.out.println("key = " + key + ", value = "+ value);
        }

        System.out.println("entrySet 활용");
        Set<Map.Entry<String, Integer>> entries = studentMap.entrySet();

        for (Map.Entry<String, Integer> entry : entries) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println("key=" + key + ", value=" + value);
        }

        System.out.println("values 활용");
        Collection<Integer> values = studentMap.values();
        for (Integer value : values) {
            System.out.println("value = " + value);
        }

        //학생 성적 데이터 추가(같은 키에 다른값을 저장할 때)

        studentMap.put("studentE", 80);
        System.out.println(studentMap);

        studentMap.put("studentE", 100);//같은키에 다른값 저장 시 새로운 값으로 덮어 쓰여진다
        System.out.println(studentMap);

        //이러한 상황이 안이뤄지게 학생이 없는 경우에만 추가해보자
        if(!studentMap.containsKey("studentE")){
            studentMap.put("studentE",100);
        }
        //위와 같이 if문으로 해도 된다 하지만 Map에서 지원하는 putIfAbsent라는 메서드를 사용하면 편하다
        studentMap.putIfAbsent("studentE",100);


    }
}

자료구조 - ArrayList를 공부하기 전 배열에 대해 공부 및 Big O로 연산 속도 계산



import java.util.Arrays; // 배열을 이쁘게 출력하기 위한 유틸 라이브러리

public class ArrayMain {

    public static void main(String[] args) {   
        //[배열에서 인덱스를 사용하는 경우]
        int arr[] = new int [5];
        arr[0] = 1;
        arr[1] = 2;
        arr[1] =10; // 매우 빠르게 변경 할 수 있음.
        System.out.println("배열: "+ Arrays.toString(arr));


        //배열의 첫번째 위치에 추가하는 경우
        addFirst(arr, 12);

        //index위치에 추가하는 경우
        addIndex(arr, 3, 3);

        //마지막 위치에 추가하는 경우
        addLast(arr, 10);

        
    }

    public static void addFirst(int[] arr, int value){
        System.out.println("첫번째 위치에 "+ value + "을 추가합니다.");
        for(int i = arr.length-1 ; i> 0;  i--){
            arr[i] = arr[i-1];
        }
        arr[0] = 3;
        System.out.println(Arrays.toString(arr));    
    }

    public static void addIndex(int[] arr, int index, int value){
        System.out.println(index + "의 위치에 "+ value + "을 추가합니다");
        for(int i = arr.length-1; i>index; i--){
            arr[i] = arr[i-1];
        }
        arr[index] = value;
        System.out.println(Arrays.toString(arr));    
    }

    public static void addLast (int[] arr, int value){
        System.out.println("마지막 위치에 "+ value + "을 추가합니다.");
        arr[arr.length -1] = value;
        System.out.println(Arrays.toString(arr));    

    }
}





    /*
    [배열의 특징]
    
    
    1. [배열에서 인덱스를 사용하는 경우]
        배열의 초기값 + (데이터 타입의 용량 x 인덱스) 로 메모리 주소값을 찾아 값을 가져온다.
        이를 Big O 표기법으로 하면 O(1) 이다 Big O 표기법은 대학에서 배웠으니 생략한다. 
        
    
    2. [데이터 추가]
        
        1.  첫 위치에 데이터를 추가하는 경우에는 기존데이터들을 모두 한칸씩 밀어 추가할 위치를 확보해야한다.
            이때 배열의 마지막 부분부터 오른쪽으로 밀어야 데이터를 유지할 수 있다.
            왼쪽의 데이터를 오른쪽에 대입하는 과정을 반복한다. ( 그래야지 데이터가 유지된다.)
            모든 데이터를 배열의 크기만큼 한칸씩 이동하므로 O(n)만큼의 연산이 걸린다.

        전: [1, 2, 3, 4, 0] 후: [7, 1, 2, 3, 4]
        
        
        2. 중간 위치에 데이터를 추가하는 경우에는 배열의 첫번째 위치를 찾는데 O(1) 만큼이 걸리고
            중간에서 오른쪽에 있는 데이터를 모두 오른쪽으로 한칸씩 이동하므로 O(n/2)만큼이 걸리므로
            O(1+n/2)가 걸리므로 O(n)만큼 걸린다.



    
        3. 마지막 위치에 데이터를 추가하는 경우는 배열이 이동하지 않고 배열의 길이를 사용하여 마지막 인덱스를 
            추가하기만 하면 되기에 O(1)만큼의 연산이 걸린다.        
        
        
    [배열의 한계]
    1. 배열의 크기를 생성하는 시점에 미리 정해야한다는 점
    2. 배열의 크기를 크게 하면 메모리 낭비, 작게하면 메모리 부족 

    >> 동적으로 배열의 크기가 정해지면 좋을 것 같다.
    >> 이것을 해결하는게 "리스트" 이다
    
        
        
        
        
        
        
    */

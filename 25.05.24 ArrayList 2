    [리스트의 특징]
    - 순서가 있고, 중복을 허용하는 자료구조를 리스트라고한다.
    - 리스트는 배열과 다르게 크기가 동적이다.
    - 보통 배열을 사용한 리스트라고해서 ArrayList 라고 한다.
    
이 코드에서는 ArrayList를 직접 만들어 보겠다

예시코드 1
- 큰 기능은 없다 add는 배열의 맨 마지막에 값을 추가하는 메서드이다 (배열의 값이 비어있는지는 확인하지 않는다 예제코드이므로)

import java.lang.reflect.Array;
import java.util.Arrays;
public class MyArrayList1 {

    private static final int DEFAULT_CAPACITY = 5;

    private Object[] elementData;
    private int size = 0;

    public MyArrayList1(){
        elementData = new Object[DEFAULT_CAPACITY];
    }

    public MyArrayList1(int initialCapacity){
        elementData = new Object[initialCapacity];
    }

    public int size(){
        return size;
    }

    public void add(Object e){
        elementData[size] = e;
        size++;
    }

    public Object get(int index){
        return elementData[index];
    }

    public Object set(int index, Object element){
        Object oldValue = get(index);
        elementData[index] = element;
        return oldValue;
    }

    public int indexOf(Object o){
        for(int i = 0; i<size; i++){
            if(o.equals(elementData[i])){
                return i;
            }
            
        }
        return -1;
    }

    @Override
    public String toString() {
        return Arrays.toString(Arrays.copyOf(elementData, size)) + " size=" +
                size + ", capacity=" + elementData.length;
    }

}


예제코드 2
다른 코드들은 위 코드와 모두 같다 
add 메서드가 조금 바뀌었는데 위 코드의 문제점은 배열의 크기보다 더 많은 값이 들어오면 컴파일 오류가 났었는데
add 메서드를 사용할 때 배열의 크기보다 더 많은 값이 들어왔을 때 자동으로 배열의 크기를 늘려주는 메서드로 개선하였다.


    public void add(Object e){
        //배열이 크기보다 더 넣을 때 배열의 사이즈를 늘리는 코드 추가
        if(size == elementData.length){
            grow();
        }
        elementData[size] = e;
        size++;
    }

    @Override
    public String toString() {
        return Arrays.toString(Arrays.copyOf(elementData, size)) + " size=" +
                size + ", capacity=" + elementData.length;
    }

    //코드추가
    //코드의 최대길이를 늘리는 메서드
    private void grow(){
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity * 2;     
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
}
    /*  

        [배열을 새로 복사하는 과정]

        // 배열을 새로 만들고.
        Object[] newArr = new Object[newCapacity];

        // 기존 배열을 복사해서 새로운 배열에 넣기
        for(int i = 0; i < elementData.length; i++){
            newArr[i] = elementData[i];
        }

        //기존 배열의 참조값 -> 새로운 배열의 참조값;
        elementData = newArr;
   

        //위의 과정을 한줄로 요약 할 수 있다.
        //Arrays 라이브러리의 copyOf 메서드를 사용한다.
         elementData = Arrays.copyOf(elementData, newCapacity);


        알아아햘것
        grow 메서드는 지금 capacity를 2배씩 증가시키고 있지만
        보통은 1씩 증가시키지도(배열 복사가 너무 자주 일어나므로) 않고 배열 크기의 50%만 증가시킨다.
 */


예제코드 3
Index 위치에 값을 추가하거나 지우는 코드를 추가하자
어려울 건 없었다 그냥 코드의 맨뒤에 추가하던 add 메서드와 코드의 중간에 삽입하는 add 메서드, 그리고 인덱스에 따라 값을 지우는
remove 메서드를 새로 만들었다.


    //추가 코드
    public void add(int index, Object value){
        if(size == elementData.length){
            grow();
        }    
        for(int i = size; i>index; i--){
            elementData[i] = elementData[i-1];
        }
        elementData[index] = value;
        size++;        
    }

    public Object remove(int index){
        Object oldValue = get(index);
        elementData[index] = null;

        for(int i = index; i<size-1; i++){
            elementData[i] = elementData[i+1];
        }
        size--;
        elementData[size] = null;
        return oldValue;
    }
}


예제코드 4
위코드의 문제점이 하나 더 있다 배열에 다른 타입들이 각각 들어올수는 있는데 꺼낼 때 다운캐스팅을 해서 꺼내야한다.
 제네릭을 사용해보자


코드가 살짝 다르긴 한데 그냥 입력과 출력을 하는 메서드들에 Object 타입 말고 타입 매개변수 E를 사용한 것 뿐이다.
대신 조금 알아야하는 부분이 몇개 있다.

1. 배열 생성자에서는 제네릭을 사용 할 수 없어서 Object로 배열을 생성 하였다. 
 - 이건 먼저 공부한건데 리스트랑 내가 만든 리스트는 다르다 제일 큰건 제네릭을 사용 할 수 없는것
 - 사실 내가 만든건 배열을 리스트 처럼 구현한거지 자바 컴파일러는 이를 똑같이 배열이라 생각한다.
 - 왜 그런지 찾아 봤더니 이레이저 떄문이다 
 - 애초에 제네릭은 컴파일타임 때 오류를 방지하는거지 런타임에서는 Box<Integer>이든 Box<String>이든 똑같이 Box로 인식한다. 
   암튼 배열 생성자에서는 제네릭을 사용하지 못하는데 이는 다 타입 안정성 때문이다
  -리스트는 내부적으로 배열처럼 작동하지만,
  - 타입 안정성은 컴파일러가 보장해 줌 → 제네릭 OK
  - 배열은 JVM이 타입을 책임지는데, 제네릭은 런타임에 타입이 사라지므로 위험함 → 제네릭 배열 직접 생성 ❌

import java.util.Arrays;

public class MyArrayList4<E> { //내가 만든 리스트에 제네릭을 사용해보자
    private static final int DEFAULT_CAPACITY = 5;

    private Object[] elementData;
    private int size = 0;

    public MyArrayList4(){
        elementData = new Object[DEFAULT_CAPACITY];
        
    }

    public MyArrayList4(int initialCapacity) {
        elementData = new Object[initialCapacity];
    }

    public int size() {
        return size;
    }

    public void add(E e) {
        if (size == elementData.length) {
            grow();
        }
        elementData[size] = e;
        size++;
    }

    public void add(int index, E e) {
        if (size == elementData.length) {
            grow();
        }
        shiftRightFrom(index);
        elementData[index] = e;
        size++;
    }
    //요소의 마지막부터 index까지 오른쪽으로 밀기
    private void shiftRightFrom(int index) {
        for (int i = size; i > index; i--) {
         elementData[i] = elementData[i - 1];
     }
    }



    @SuppressWarnings("unchecked") ㅡㅡㅡㅡㅡ 원래는 이렇게 꺼내면 컴파일러가 다운캐스팅을 계속 해야해서 오류가 뜨는데 어차피 add 메서드는 하나의 타입만 들어 갈 수 있게 해버렸으니 오류 메세지를 끄는 방법이다
    public E get(int index) {
        return (E) elementData[index]; 
    }

    public E set(int index, E element) {
        E oldValue = get(index);
        elementData[index] = element;
        return oldValue;
    }

    public E remove(int index) {
        E oldValue = get(index);
        shiftLeftFrom(index);
        size--;
        elementData[size] = null;
        return oldValue;
    }

    //요소의 index부터 마지막까지 왼쪽으로 밀기
    private void shiftLeftFrom(int index) {
        for (int i = index; i < size - 1; i++) {
            elementData[i] = elementData[i + 1];
        }
    }

    public int indexOf(E o) {
            for (int i = 0; i < size; i++) {
                if (o.equals(elementData[i])) {
                return i;
            }
        }
        return -1;
    }

    private void grow() {
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity * 2;
        elementData = Arrays.copyOf(elementData, newCapacity);
    }

    @Override
    public String toString() {
    return Arrays.toString(Arrays.copyOf(elementData, size)) + " size=" +
    size + ", capacity=" + elementData.length;
    }
}


총평
코드는 짜는데 어렵진 않은데 이사람이 왜 이렇게 가르쳐주는지 모르겠다 진짜 리스트를 가르쳐 주던가 아니면 배열과 리스트에 대해서 이론적으로만 설명해주던가
왜 굳이 배열을 리스트로 만든척 해서 사람 이해하기 힘들게 하는지 원 암튼 내가 알게된건 이레이저 때문에 배열 생성자에서  제네릭 사용못한다는건 확실히 알았다.

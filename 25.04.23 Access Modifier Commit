 class Student {
    public String name;       // 어디서든 접근 가능
    protected int grade;      // 같은 패키지 + 상속 관계에서 접근 가능
    int age;                  // (default) 같은 패키지에서만 접근 가능
    private String password;  // 같은 클래스 내부에서만 접근 가능

    public void printInfo() {
        System.out.println("이름: " + name);
        System.out.println("학년: " + grade);
        System.out.println("나이: " + age);
        System.out.println("비밀번호: " + password);
    }
}
public class Main {
    public static void main(String[] args) {
        Student s = new Student();
        s.name = "영희";         // public → 가능
        s.grade = 3;             // protected → 같은 패키지니까 가능
        s.age = 18;              // default → 가능
        s.password = "1234";     // ❌ private → 오류 발생
    }
}


// 접근제어자

//25.04.24
오늘은 코드스페이스 버그 때문에 많이 못했다
개념은 어제 그대로임

문제 - 최대 카운터와 캡슐화
MaxCounter 클래스를 만드세요.
이 클래스는 최대값을 지정하고 최대값 까지만 값이 증가하는 기능을 제공합니다.
int count : 내부에서 사용하는 숫자 입니다. 초기값은 0입니다.
int max : 최대값 입니다. 생성자를 통해 입력합니다.
increment() 숫자를 하나 증가합니다.
getCount() 지금까지 증가한 값을 반환합니다.

요구사항
접근 제어자를 사용해서 데이터를 캡슐화 하세요.
해당 클래스는 다른 패키지에서도 사용할 수 있어야 합니다.

package access;

public class CounterMain {
    public static void main(String[] args) {
        MaxCounter counter = new MaxCounter(3);
        counter.increment();
        counter.increment();
        counter.increment();
        counter.increment();
        int count = counter.getCount();
        System.out.println(count);
        
    }
    
}

package access;

public class MaxCounter {
    private int count; //요구사항대로 개발자가 의도하지 않은 작동이 일어나지 않도록 private 변수 선언
    int max;           //객체가 선언될 때 최댓값을 가지고 있어야 하므로 변수로 선언했다
                       //private로 해도 되려나? >> 되네 ㅋㅋ >> 생성자도 메서드의 일종이니깐 생성자를 통해서 멤버 변수에 입력할 수 있구나

    MaxCounter(int max) // 생성자 오버로딩 바로 최댓값을 입력받아서 객체가 생성됨
    {
        this.count = 0;
        this.max = max;
    }

    public void increment() // 최댓값을 초과하면 값이 증가되지 않도록 조건문 걸기
    {
        if(max>count)
        {
            this.count++;
        }
        else
        {
            System.out.println("최대값을 초과할 수 없습니다.");
        }
    }

    public int getCount() // getter 메서드
    {
        int num = this.count;
        return num;
    }

}

문제 후기: 너무 쉽다 내일은 코드스페이스 버그 고쳤으니깐 문제도 여러개 풀어보고 커밋도 조금 더 다듬어야겠다

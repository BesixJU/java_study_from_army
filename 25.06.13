import java.util.Arrays;
/*
[정렬]
데이터의 값을 비교하여 특정 조건을 만족하는 규칙대로 위치를 바꾼다.

[비교자 - Compartor]
정렬을 내가 원하는 방식으로 바꾸고 싶을때 ex)내림차순으로 정렬
"비교자"를 사용한다.
public interface Comparator<T> {    //T는 비교할 객체의 타입을 넣는다
    int compare(T o1, T o2);
}
비교자는 2개의 매개변수를 받아서 계산한다.
만약 Integer 타입을 비교한다면

@Override
compare(Integer int1, Integer int2){
    return((int1<int2)?-1:((int1 == int2 ? 0:1)));
}

이런식으로 메서드를 오버라이딩 하면 된다.
그러나 compare을 비교할 때 굳이 -1. 0 ,1로 반환할 필요는 없다
음수, 0 , 양수 로 비교해도 된다. 그렇다면 내가 오름차순으로 정렬할 것이라면 
굳이 복잡하게 삼항연산자를 2번이나 쓸 필요는 없다

@Override
compare(Integer int1, Integer int2){
    return int2 - int1;
}
이렇게 해버리면 끝난다. 

사용방법은 다음과 같다.

Arrays.sort(arr, new myCompator);




[Comparable]

Comparable 인터페이스를 구현하면 기본 정렬을 바꾸는 것이다 
기본정렬을 바꾸고 싶으면 Comparable 인터페이스를 구현하면 된다.
public interface Comparable<T> {    //T는 비교할 객체의 타입을 넣는다
    public int compareTo(T o);
}

comparator와 Comparable의 차이는 단순하다. 

Comparator는 2개의 매개변수를 비교하며, compare을 Overriding한다.
Comparable은 나 자신과 매개변수를 비교하며, compareTo를 Overriding한다.

이를 구현하면 다음과 같다
@Override
compareTo(Integer int1){
    return int2 - int1;
}

위에 서술한 compare와 똑같이 굳이 삼항 연산자 쓸 필요 없다.




사용방법

Arrays.sort(arr);

이렇게 메서드를 사용하는 순간 객체가 스스로 가지고 있는 Comparable 인터페이스를 사용해서 비교한다.


[정리]
자바의 정렬 알고리즘은 매우 복잡하고, 또 거의 완성형에 가깝다.
자바는 개발자가 복잡한 정렬 알고리즘은 신경 쓰지 않으면서 정렬의 기준만 간단히 변경할 수 있도록, 정렬의 기준을
Comparable , Comparator 인터페이스를 통해 추상화해 두었다.
객체의 정렬이 필요한 경우 Comparable 을 통해 기본 자연 순서를 제공하자. 자연 순서 외에 다른 정렬 기준이 추가
로 필요하면 Comparator 를 제공하자.






*/
import java.util.Comparator;




public class SortMain {
    public static void main(String[] args){
        Integer[] array = {3,2,1};
        System.out.println(Arrays.toString(array));

        Arrays.sort(array);
        System.out.println("기본 정렬 후: "+ Arrays.toString(array));

        //정렬을 사용할 때 내가 만든 비교자 객체를 넣으면 내가 만든 비교자를 사용할 수 있다.
        Arrays.sort(array, new AscComparator());
        System.out.println("오름차순 정렬 후: : "+ Arrays.toString(array));
       
        Arrays.sort(array, new DescComparator());
        System.out.println("내림차순 정렬 후 : ");
        Arrays.sort(array, new DescComparator());

        //만약 내가 만든 정렬을 뒤집고 싶다 ex)1,2,3으로 정렬하는 알고리즘인데 3,2,1로 정렬하는 
        //알고리즘을 굳이 짤 필요 없이 reversed()라는 비교자의 값을 반대로 반환하는 메서드를 사용하면 된다.
        Arrays.sort(array, new AscComparator().reversed());
    }


    //선언 방법은 다음과 같다(여기서는 중첩클래스로했지만 따로 뺴도 된다)
    //올림차순으로 정렬하는 compartor
    static class AscComparator implements Comparator<Integer> {     
        @Override
        public int compare(Integer o1, Integer o2) {
            System.out.println("o1=" + o1 + " o2=" + o2);
            return (o1 < o2) ? -1 : ((o1 == o2) ? 0 : 1);
        }
    }
    
    //내림차순으로 정렬하는 compartor
        static class DescComparator implements Comparator<Integer> {   
        //위의 오름차순 정렬을 하는 비교자 결과값의 반대값을 리턴하기에 내림차순 정렬이 된다.  
        @Override
        public int compare(Integer o1, Integer o2) {
            System.out.println("o1=" + o1 + " o2=" + o2);
            return ((o1 < o2) ? -1 : ((o1 == o2) ? 0 : 1)) * -1;
        }
    }
}



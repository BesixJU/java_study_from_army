import java.util.Arrays;

public class MyListPerFormanceTest{
    public static void main(String[] args) {
        int size = 50000;
        int loop = 10000;
        System.out.println("==MyArrayList 추가 ==");

        //메서드 안에 바로 생성자를 이용하여 리스트를 만든다, 굳이 변수를 만들 필요는 없다.
        //데이터를 밀어야하기에 O(n)
        addFirst(new MyArrayList<>(), size);

        //데이터를 밀어야하기에 O(n);
        addMid(new MyArrayList<>(), size);

        //바로 인덱스 끝으로 가서 데이터를 새로 추가하기면 되기에O(1)
        addLast(new MyArrayList<>(), size);

        //데이터 조회용
        MyArrayList<Integer> arrayList = new MyArrayList<>();
        System.out.println("==MyArrayList 조회 ==");
        getIndex(arrayList, loop, 0);

        System.out.println("==MyLinkedList 추가 ==");

        //앞에 새로운 노드만 생성하고 참조값만 연결하면 되므로 O(1)
        addFirst(new MyLinkedList<>(), size);
       
        /*
        중간에 새로운 노드를 생성하는데 위에보다는 적게 데이터를 탐색하므로(평균 추가이니까) O(n)
        라고 생각했는데 실제로 돌려보면 달라서 조사해보니 LinkedList는 실제 사용할 때 노드를 사용하니깐 
        캐시를 많이 사용해서 그렇기도 하고 시간 복잡도도 Array는 인덱스로 접근 후 미는데 O(n)이 걸리고, Linked는 인덱스로 접근을 바로 못해서 O(n)이 걸리기에 
        결론적으론 둘다 이론적으로 시간복잡도는 같지만, 이론적으로는 더 빠를 수 있다 하지만 위의 구조와 접근 방식 때문에  Array가 더 나은 경우가 많다.
        너무 성급하게 공부하지 말고 차근차근 확실히 이해하자 노드는 인덱스로 접근 불가!! 일일히 탐색해야한다.
         */
        
        addMid(new MyLinkedList<>(), size);


        //인덱스로 배열의 위치를 찾지 못하기에 O(n)이 걸린다
        addLast(new MyLinkedList<>(), size);

        //데이터 조회용
        MyLinkedList linkedList = new  MyLinkedList<>();
        addFirst(linkedList, size);
        System.out.println("==MyLinkedList 조회 ==");
        getIndex(linkedList, loop, 1);
    }

  [정리]
   시간복잡도의 이유는 주석 참고
   
                    ArrayList       ㅣ    LinekdList
  처음삽입:              O(n)                  O(1)
  중간삽입:              O(n)                  O(n)
  마지막삽입:             O(1)                O(n)
  search                O(n)                  O(n)

  서치가 더 빠른 이유는 노드는 객체별로 존재해서 cpu캐시효율이 떨어지고 
  메모리접근 속도가 상대적으로 느릴 수 있고
  메모리상에서 연속적으로 위치하여 캐시효율이 좋고 메모리 접근속도가상대적으로 빠를수있다

  실무에서는 거의 어레이리스트가 많이 쓰인다
  

      
==============================================안 봐도 됨============================================================= 

    private static void addFirst(MyList<Integer> list,int size ){
        long startTime = System.currentTimeMillis();
        for(int i = 0; i< size; i++){
            list.add(0, i);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("앞에 추가 - 크기: "+ size+ ", 계산 시간" + (endTime - startTime) + "ms");
    }

        private static void addMid(MyList<Integer> list,int size ){
        long startTime = System.currentTimeMillis();
        for(int i = 0; i< size; i++){
            list.add(i/2, i);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("평균 추가 - 크기: "+ size+ ", 계산 시간" + (endTime - startTime) + "ms");
    }


        private static void addLast(MyList<Integer> list,int size ){
        long startTime = System.currentTimeMillis();
        for(int i = 0; i< size; i++){
            list.add(i, i);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("마지막 추가 - 크기: "+ size+ ", 계산 시간" + (endTime - startTime) + "ms");
    }

    private static void getIndex(MyList<Integer> list, int loop, int index){
        long startTime = System.currentTimeMillis();
        for (int i = 0; i < loop; i++) {
            list.get(index);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("index: "+ index + ", 반복: "+ loop+ ", 계산시간: "+(endTime - startTime) + "ms" );

       
    }
}


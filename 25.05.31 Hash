    Set의 특징
    - 중복되지 않는다, 순서가 없다, 빠르게 검색 가능하다.
    - 주로 고유한 유저의 ID저장용 
    - List는 순서가 중요한 장바구니 목록 같은거에 사용.

    이중 배열을 한번도 사용하지 않았다 보니 메서드를 만드는 과정이 약간 감이 안잡힌다 
    나중에 무조건 헷갈릴거같은데 나중에 써보면서 계속해서 공부하자
    메서드를 만들 때는 바깥 배열을 먼저 파라미터로 받고 내부에서 생성자를 통해서 
    안의 배열을 하나하나 받아야한다.





===================================================================================
    MySet의 특징
    - 간단하지만 속도가 느리다
    - 데이터의 추가 검색 모두 O(n)으로 효율이 좋지 않다 특히 데이터가 많을 수록 효율은 매우 떨어진다
    - 이를 개선해야한다.
[My Set 코드]
public class MyHastSetV0 {

    private int[] elementData = new int [10];
    private int size = 0;

    public boolean add(int value){
        if(contains(value)){
            return false;
        }
        elementData[size] = value;
        size++;
        return true;
    }


    //O(n)
    public boolean contains (int value){
        for (int data : elementData) {
                if(data == value){
                    return true;
                }
        }
        return false;
    }

    public int size(){
        return size;
    }

    @Override
    public String toString(){
        return "MyHashSetV0 elementData" + Arrays.toString(Arrays.copyOf(elementData, size))+
        ", size = " + size + "}";
    }

}
=========================================================================================================================================
Set에 본격적으로 들어가기 전에 Hash에 대해 먼저 공부한다.
Hash란 임의의 길이를 갖는 임의의 데이터를 고정된 길이의 데이터로 매핑하는 단방향 함수를 말한다.
여기서는 %10 이 해시 함수라고 볼 수 있다.


public class HashStart1 {
    final static int CAPACITY = 10;
    public static void main(String[] args) {

    그냥 배열로 저장해보자
        Integer[] inputArray = new Integer[4];
        
        inputArray[0] = 1;
        inputArray[1] = 2;
        inputArray[2] = 5;
        inputArray[3] = 8;
        System.out.println(Arrays.toString(inputArray));

        int searchValue = 8;

        //4번 반복한다 O(n)
        for (Integer integer : inputArray) {
            if(integer == searchValue){
                System.out.println(integer);
            }
        }

        //이러면 검색을 할 때 O(n)으로 굉장히 느리다 
       

        //만약 값과 인덱스를 맞추어 저장하면 어떨까? 1에는 1을 2에는 2를 9에는 9를 넣어보자          
        Integer[] inputArray2 = new Integer[10];
        inputArray2[1] = 1;
        inputArray2[2] = 2;
        inputArray2[5] = 5;
        inputArray2[8] = 8;
        System.out.println(Arrays.toString(inputArray2));

        Integer result = inputArray2[searchValue];
        System.out.println("result = " + result );
        
        //O(n)이나 걸리던 검색속도를 인덱스 검색으로 바꾸니 O(1)로 획기적으로 개선되었다.
        //그러나 입력값의 범위만큼 큰 배열을 사용하는 메모리 낭비라는 단점이 있다.



        



      
        //0~99의 값을 인덱스로 저장하는 배열을 만들어보자
        Integer[] inputArray3 = new Integer[100];
        inputArray3[1] = 1;
        inputArray3[2] = 2;
        inputArray3[5] = 5;
        inputArray3[8] = 8;
        inputArray3[14] = 14;
        inputArray3[99] = 99;
        System.out.println(Arrays.toString(inputArray3));

        searchValue = 99;
        Integer result3 = inputArray3[searchValue];
        System.out.println("result3 = " + result3 );

        
        [출력결과]
        [null, 1, 2, null, null, 5, null, null, 8, null, null, null, null, null, 14, null, null, null, null, null, null, null, null, null, null, null
        , null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 99]

        //데이터의 값을 인덱스로 사용하는 방식의 한계가 여기서 드러난다
        //굉장히 빠른 속도로 값을 찾을 수 있지만
        //입력값의 범위가 커지면 커질수록 너무 쓸데없이 메모리의 낭비가 심하다.
        //int의 범위값을 담으려면 약 17기가 바이트가 필요하다...


        //공간도 절약하면서 넓은 범위의 값을 사용할 수 있는 방법이 있다
        // 바로 "나머지 연산자 %"를 사용하는 것이다(해시)
        //이렇게 배열의 인덱스로 사용 할 수 있도록 값을 계산한 인덱스를 해시 인덱스(Hash Index)라고 한다.


        //해시 인덱스로 저장해보자(여기서 Hash Index = Value % 10)
        Integer[] inputArray4 = new Integer[10];
        add(inputArray4, 1);
        add(inputArray4, 5);
        add(inputArray4,8);
        add(inputArray4, 14);
        add(inputArray4, 99);
        System.out.println(Arrays.toString(inputArray4));

        searchValue = 14;
        int hashIndex = hashIndex(searchValue);
        result = inputArray4[hashIndex];
        System.out.println("result = "+result);

        //해시 인덱스를 사용하는 방법으로 메모리 낭비를 줄이고 검색속도도 증가시켰는데 한계가 있다.
        //저장한 위치가 충돌할 수 있는 한계가 있다
        //11과 21은 같은 위치에 들어가므로 중복을 허용하지 않는 set의 특성상 충돌이 된다.
        //이를 해시 충돌이라고 한다.
        
        
      
        [해시 충돌 해결법]
        - 바로 해시 충돌을 인정하는 것이다 (어이가 없네)
        - 대신 해시 충돌은 낮은 확률로 일어난다고 가정하고 해시 충돌이 일어나면 그 값을 같은 인덱스에 저장한다.
        - 이중 배열을 사용하여 같은 인덱스에 값을 n개 이상을 저장한다.
        - 그리고 값을 조회할 때 equals 메서드를 사용하여 같은 값일 때 반환을 하는 것이다.
        - 대신 최악의 경우에 해시 인덱스가 너무 겹치면 O(n)이 될수도 있다.
        */

        //한번 구현해보자
        //ArrayList로 해도 되지만 메모리 낭비를 치대한 줄이기 위해 LinkedList를 사용했다.
        //어차피 해시 충돌은 여기서는 굉장히 많이 일어나지만 실제로는 낮은 확률로 일어나기 때문에 
        //해시충돌이 나지만 않으면 검색 시 O(1)의 속도를 제공한다.
        //해시 충돌이 날 확률은 배열의 크기와 입력되는 데이터의 범위와 반비례한다.

        
        LinkedList<Integer>[] buckets = new LinkedList[CAPACITY];//LinkedList를 담을 수 있는 배열을 생성한거지 LinkedList가 들어있지 않다.
        for(int i = 0; i<CAPACITY; i++ ){
            buckets[i] = new LinkedList<>();//buckets안에 LinkedList를 만들어준다
        }
        
        //출력
        System.out.println("buckets  = " + Arrays.toString(buckets));
        add(buckets, 2);
        add(buckets, 5);
        add(buckets, 8);
        add(buckets, 14);
        add(buckets, 99);
        add(buckets,9);// 중복되는 해시코드
        System.out.println("buckets  = " + Arrays.toString(buckets));

        [출력결과]
        [[], [], [2], [], [14], [5], [], [], [8], [99, 9]]

        //검색
        searchValue = 9;
        boolean result5 = contains(buckets, searchValue);
        System.out.println("buckets.contains("+ searchValue+") = "+  result5);
        


        
               
        
        
        

    
        
    }

    //HashIndex를 반환하는 메서드
    private static int hashIndex(int value){
        return value % 10;
    }

    private static Integer hashIndex(Integer value){
        return value % 10;
    }    

    //HashIndex의 위치에 값을 저장한다.
    private static void add(LinkedList<Integer>[] buckets, Integer value){
        //bucket은 buckets 안에 있는 배열이다
        LinkedList<Integer> bucket = buckets[hashIndex(value)];
        if(!bucket.contains(value)){
            bucket.add(value);
        }
    }

    private static void add(Integer[] inputArray, int value){
        inputArray[hashIndex(value)] = value; 
    }


    //해당 인덱스에 값을 가지고 있는지 bool을 반환하는 메서드
    private static boolean contains(LinkedList<Integer>[] buckets, int value){
        LinkedList<Integer> bucket = buckets[hashIndex(value)];
        return bucket.contains(value);
    }

}

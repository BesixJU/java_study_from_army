다형성에 대한 정리

public class Parent {
    int parentValue;


    void parentMethod(){
        System.out.println("Parent Method");
    }
}

public class Child extends Parent{

    int childValue;
    public void childMethod(){
        System.out.println("Child Method");
    }

    public static void call(Parent parent){
        if(parent instanceof Child){
            System.out.println("Child 인스턴스 맞음");
            Child child = (Child) parent;
            child.childMethod();
        }
    }
}

public class CastingMain {

    public static void main(String[] args) {
        //부모 변수가 부모 인스턴스를 참조
        Parent parent = new Parent();
        parent.parentMethod();
        

        //자식 변수가 자식 인스턴스를 참조
        Child child = new Child();
        child.childMethod();

        // 자식 변수가 부모 인스턴스를 참조
        //Child poly2 = new Parent();   컴파일 에러 자식은 부모를 담을 수 없다.


        //부모 변수가 자식 인스턴스를 참조  (다형적 참조, 업캐스팅)
        Parent poly1 = new Child();
        //poly.childMethod();            컴파일 에러    
        poly1.parentMethod();

      
        // 다운 캐스팅
        Child poly2 = (Child) poly1;    // 다운 캐스팅
        poly2.childMethod();             

      
        
        
    }
}


/*[다형성]
 * 다형성이란? 부모 클래스가 여러가지의 자식 클래스를 가지는 것
 * 왜?  공통된 특징을 가지는 객체들을 모아서 여러가지 코드의 재사용, 유지보수 등이 유리하기 때문.
 * 
 * 특징:
 * 부모변수 -> 부모 인스턴스, 자식변수 -> 자식변수 는 당연히 선언 가능하다.
 * 근데 부모변수 -> 자식 인스턴스 도 가능하다! 이런걸 "업캐스팅"이라고 한다 (반대로는 다운 캐스팅)
 * 
 * [업캐스팅]
 *  - 부모 타입으로 변경
 *  - 코드의 유지 및 보수, 유연한 코드작성 등의 이점을 가진다
 *  - 부모 타입으로 모든 자식을 다룰 수 있다 ex)부모 타입의 배열로 자식 인스턴스를 한번에 관리 가능.
 * 
 * [다운 캐스팅]
 * - 자식 타입으로 변경
 * - 업캐스팅을 하면 당연히 자식 메서드를 사용 할 수 없다!
 * - 자식 메서드를 사용 하고 싶을 때에는 다운 캐스팅을 해야한다.
 * - !!!캐스팅을 한다고 해서 부모타입 변수가 자식 타입 변수가 되는건 아니다!!!!
 * 
 *      EX)
 *          부모타입 A = new 자식 인스턴스();  
 *          자식타입 B = (자식타입) A;          >> 다운 캐스팅을 통해 부모타입을 자식타입으로 변환 한 후 참조값을 읽은 다음 자식 타입으로 지정.
 *   
 * 
 * [일시적 다운캐스팅]
 *  - 부모타입을 자식 메서드를 사용하기 위해 일시적으로 다운 캐스팅하는 것이다.
 * 
 *      EX)
 *          ((자식클래스) A).자식 메서드();
 * 
 *  유의할 점: 다운 캐스팅을 한 자식타입이 진짜 그 타입이어야한다 무슨소리냐면 업캐스팅 할 때 자식 인스턴스 여야한다. 아니며 오류남
 *      EX)
 *          부모타입 A = new 부모타입();
 *          자식타입 B = (자식타입) A;          >> 메모리 상에 자식타입이 존재하지 않으므로 컴파일 오류 발생.
 * 
 * [intstanceof]
 *  - 다운캐스팅 시 변환될 타입이 실제로 존재하는지 알려주는 함수
 *   
 * 
 *      Ex)
 *            - 부모타입 instanceof 부모 타입 >> 참
 *            - 자식타입 instanceof 자식 타입 >> 참
 *            - 부모타입 instanceof 자식 타입 >> 참 
 *            - 자식타입 instanceof 부모 타입 >> 거짓
 *      EX)
          void call(Parent parent){
                if(parent instanceof Child){        // Child 라는 클래스가 실제로 존재하므로 참
                    System.out.println("Child 인스턴스 맞음");
                    Child child = (Child) parent;
                    child.childMethod();
                }
            }  
                

    이 메서드는 아쉬운 점이 있다. 어차피 다운캐스팅 할건데 코드가 확인하고 다운캐스팅하느라 코드가 길어진다
        EX)
          void call(Parent parent){
                if(parent instanceof Child child){ << 자바16 이상부터는 이렇게 바로 참이라면 다운 캐스팅을 진행 할 수 있다.       
                    System.out.println("Child 인스턴스 맞음");
                    child.childMethod();
                }
            }  
 * 
 * 
 * [메서드 오버라이딩]
 * - 메서드 오버라이딩은 이미 배웠다. 
 * - 각 변수가 똑같은 인스턴스를 생성하고 메서드 호출시 인스턴스의 메서드를 호출하는 건 같다.
 * - 그렇다면 업캐스팅 한 변수에서는?
 * - 바로 오버라이딩 된 메서드를 우선적으로 실행한다.
 * 
*/

package extend;
public class Car {

    Car()
    {
        System.out.println("Car 인스턴스가 생성되었습니다.");
    }

    public void move(){
        System.out.println("차량이 이동합니다.");
    }

    public void openDoor(){
        System.out.println("차량의 문이 열립니다.");
    }
}

public class ECar extends Car {     //문법 클래스 뒤에 extend + 부모 클래스 이름
    
    ECar()
    {
        System.out.println("ECar 클래스가 생성 되었습니다.");
    }



    @Override
    public void move(){
        System.out.println("전기차를 이동합니다");

    }

    public void superMove()
    {
        super.move();               //부모 클래스의 기능을 불러온다.
    }
    void charge(){
        System.out.println("충전합니다 ");
    }

    
}

public class CarMain {
    public static void main(String[] args) {
        ECar car = new ECar();

        car.move();
        car.charge();
        car.superMove();
        
    }
}

/*[상속]
 * 상속이란 부모 클래스가 가지고 있는 메서드 및 변수를 자식 클래스로 상속하는 것이다(개념은 알고 있음)
 * 문법: class 자식클래스 extend 부모클래스;
 * 자식 클래스 인스턴스를 생성할 때 겉에서 보기엔 인스턴스 하나만 생기는 것처럼 보이지만 
 * 실제로는 부모클래스와 자식클래스 둘 다 생성된다.
 * 자식 클래스 인스턴스에서 메서드를 호출 할 때는 부모와 자식 중 자식클래스에서부터 메서드를 호출한다.
 * 만약 부모에서도 찾지 못하면 부모의 부모 클래스로 계속 올라가면서 찾는다.
 * 
 * 
 * [오버라이딩]
 * @Override 를 오버라이딩 하는 메서드 위에 선언해야한다.
 * 굳이 뭐 안넣어도 되기는 한다. 메서드를 클래스에서 재정의 했기 때문.
 * 하지만 개발자들의 혹시 모를 실수를 방지하기 위해 거의 대부분의 개발자들은 사용한다.
 * 
 * 메서드 오버로딩: 메서드 이름이 같고 파라미터가 다른 메서드를 여러개 정의하는 것.
 * 메서드 오버라이딩: 하위클래스에서 상위클래스의 메서드를 재정의 하는 것.
 * 
 * [오버라이딩 조건]
 * 1. 메서드의 이름, 파라미터, 반환타입(하위 타입도 가능), 접근제어자가 같아야 한다.
 * 2. 접근제어자 오버라이딩 메서드의 접근제어자는 상위클래스의 메서드보다 더 제한적이면 안된다.
 *    (만약 부모 클래스 메서드가 protected면 자식 클래스 에서는 private or default로 선언 할수 없다)
 * 3. final이 붙으면 불가능하다 >> 더이상 메서드를 수정하지 않을 때 붙인다. 
 * 4. private 는 당연히 불가능하다 애초에 부모 클래스내에서만 접근 가능하기에 자식 또한 접근 불가능하다.
 * 5. static은 overriding이 의미가 없다 why?) 클래스 레벨에서 작동하기에 인스턴스 레벨에서 작동하는 오버라이딩이 의미가 없다.
 *      (그냥 클래스.static 메서드 사용 해버리면 되기 때문에)
 * 
 * [super 키워드]
 * 메서드 오버라이딩 하면 부모 클래스의 메서드를 불러 올 수 없다.
 * 하지만 super 키워드를 사용하면 부모의 메서드를 불러 올 수 있다.
 * 
 * [super 생성자]
 * 상속 관계의 객체(인스턴스)를 생성하면 결국엔 자식과 부모 클래스 각각 다 만들어진다.
 * super 키워드를 사용하면 당연히 부모 클래스의 생성자가 만들어진다.
 * 기본 생성자는 자동적으로 jvm에서 만들어진다.
 * 
 * 
 */

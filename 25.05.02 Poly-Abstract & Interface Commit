public abstract class Animal {// 추상메서드가 존재 하므로 추상 클래스로 생성한다.
   
   
    public void sound(){
        System.out.println("동물 울음 소리");
    }

    public abstract void move(); // 추상 메서드
}



public class Cat extends Animal {        >> dog cow 도 똑같음.
    @Override
    public void sound(){
        System.out.println("야옹");
    }
    
    public void move(){
        System.out.println("고양이가 움직입니다.");
    }
}


// 인터페이스!!
public interface Fly {
    double MY_PI = 3.14; //인터페이스의 멤버 변수는 상수이다 (pubic static final 생략 되있음)
}


public class AnimalSoundMain {
    public static void main(String[] args) {
        Dog dog = new Dog();
        Cat cat = new Cat();
        Cow cow = new Cow();

    
        dog.sound();
        cat.sound();
        cow.sound();    
        // 위와 같이 코드를 짜면 너무 쓸데 없이 길어진다.

        animalSoundTest(dog);
        animalSoundTest(cat);
        animalSoundTest(cow);
        // 모두 다 Animal의 자식 클래스 이므로 하나의 메서드로 선언할 수 있다.

        Animal[] animalArr = {dog,cat,cow};
        for (Animal animal : animalArr) {
            animalSoundTest(animal);
        }
        
        //공통된 Animal 클래스로 배열을 만들어서 배열로도 테스트 할 수 있다.
        //다형성을 이용하면 새로운 동물이 추가되어도 메서드는 코드 변경 없이 유지 할 수 다(Animal을 상속 받는다면)




    }

        private static void animalSoundTest(Animal animal){     //Animal 타입으로 일관되게 받기

        System.out.println("동물 울음 소리 테스트 시작");
        animal.sound();
        System.out.println("동물 울음 소리 테스트 종료");
    }






        /*[추상 클래스]
         *  위의 코드는 몇가지의 문제가 있다.
         * 1. Animal을 상속받는 자식 클래스 즉 만약 새로운 동물을 추가 했을 때 개발자가 실수로 sound()를 오버라이딩 하지 않는것.
         * 2. Animal 객체만 생성 할 수 있는 문제
         * 
         * 그래서 우리는 "추상 클래스"라는 것을 사용한다 
         * Animal처럼 부모클래스로만 존재를 해야하며 실제 클래스를 생성하면 안되는 것을 추상클래스라고 한다. 
         * 추상클래스는 실제클래스와 완전히 같지만 new AbstractAnimal처럼 생성할 수 없다.
         */
         abstract class AbstractAnimal{}; //생성하는 방법
        
          /*[추상 메서드]
           * 추상 메서드는 실제로 바디가 존재하지 않는 메서드이므로 무조건 오버라이딩 해줘야한다.
           * 추상 메서드가 하나라도 있으면 추상 클래스로 선언해야한다.
           * 추상 메서드는 바디가 존재하지 않으며 그로인해 직접 생성하지 못하도록 추상클래스로 선언해야한다.
           */
        //public abstract void abstractAnimalSound(){};  생성하는 법.

        /*[순수 추상 클래스]
         * 순수 추상 클래스는 실행로직을 전혀 가지고있지않다. 그저 다형성을 위한 부모타입으로 껍데기 역할만 한다.
         * 
         * 특징:
         * 1. 인스턴스 생성 불가.
         * 2. 상속시 자식은 모든 메서드를 오버라이딩 해야 한다.
         * 3. 주로 다형성을 위해 사용된다.
         */
    

         /*
          * [인터페이스]
          * 자바는 순수 추상 클래스를 더 편리하게 사용 할 수있는 "인터페이스"를 제공한다.
            인터페이스는 class가아니라 interface 키워드를 사용하면 된다.
            특징:
            1. 인스턴스 생성 불가.
            2. 상속시 자식은 모든 메서드를 오버라이딩 해야 한다.
            3. 주로 다형성을 위해 사용된다 >>여기까지는 순수 추상 클래스와 똑같다.
            4. 인터페이스의 메서드는 모두 public, abstract이다.
            5. 메서드는 public abstract를 생략할 수 있다. 참고로 권장이 생략된다.
            6. 인터페이스는 다중 구현 (다중 상속)을 지원한다.

            [인터페이스와 멤버 변수]
            인터페이스의 멤버 변수는 public static final이 모두 포함되있다고 간주하며 생략할 수 있다.
            - 한마디로 인터페이스의 변수는 상수라는 것이다.


            [상속 vs 구현]
            상속(클래스): 부모의 기능을 물려 받는 것이 목적
            구현(인터페이스): 모든 메서드가 추상 메서드 즉 물려받을 수 있는 기능이 없고 오히려 인터페이스에
                            정의한 모든 메서드를 오버라이딩 해서 기능을 구현해야한다. 즉 인터페이스는 이름만 있는 설계도이고
                            인터페이스의 하위클래스에서 구현해야 하므로 상속이 아닌 구현한다라고 표현한다.

            [인터페이스를 사용해야 하는 이유]
            제약: 인터페이스는 인터페이스를 구현해야하는 곳에서 구현하라는 "제약"을 거는 것이다.
                  예로 USB인터페이스라는 인터페이스가 있다면 인터페이스에 맞게 모든 기능을 구현해야하는 것이다.
                  만약 순수 추상 클래스를 쓰는 경우 누군가 혹시 그곳에 실행가능한 메서드를 끼워 넣을 수 있다.
                  그렇게 되면 그것은 순수추상클래스가 아니게된다. 인터페이스는 이런 모든 경우를 차단 할 수있다.
            
            다중 구현: 자바에서 클래스는 하나만 상속 받을 수 있지만 인터페이스는 다중구현(다중상속)이 가능하다.
                       클래스는 부모가 같은 이름의 기능을 둘 다 가지고 있다면 자식 클래스는 무엇을 실행해야하는지 애매해진다.
                        
                      **인터페이스는 같은 이름의 기능을 둘 다 가지고 있다 해도 **
                      ** 어차피 자식클래스에서 메서드를 오버라이딩 하기에 이름이 같던 상관없이 자식 클래스 메서드가
                      **사용되므로혼동이 없다.**
                        

            사용법:
                Ex)
                    public class Child extend Parent implements InterfaceA, InterfaceB;
                    
                    항상 클래스 먼저 상속 받고 인터페이스를 받는다.






          */



    }



  

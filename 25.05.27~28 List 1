지금까지는 구체적인 클래스에 의존을 해왔지만 어레이리스트와 링크드리스트를 둘 다 사용하고 싶을 때는 추상화를 시키면 된다
(말이 좀 이상하긴 한데 암튼 인터페이스를 사용해서 다형성을 구현한다 라고 생각하면 된다)


//인터페이스 MyList, 제네릭을 사용해서 타입안정성을 높힌다.
public interface MyList<E> {

    int size();

    void add(E e);

    void add(int index, E e);

    E get(int index);

    E set(int index, E element);

    E remove (int index);

    int indexOf(E o);
}


MyList를 활용한 에제코드


public class BatchProcessor {
    //만약 큰 데이터를 다루는 클래스를 내가 개발했다 근데 Array리스트로 개발을 했는데 맨 앞에 추가 할 데이터가
    //너무 많아서 LinkedList로 바꾸고 싶다

    //private final MyArrayList list = new MyArrayList(); 
    
    //private final MyLinkedList list = new MyLinkedList();

    // 위와 같이 하나의 클래스를 사용하는 경우를 우리는 구체적인 클래스에 의존하고 있다 라고 표현한다
    // 만약 이 BatchProcessor의 리스트의 종류를 바꾸고 싶을 때 코드를 다 뒤집어야한다
    // 하지만 이를 추상적 인터페이스인 MyList를 사용한다면 코드를 바꾸지 않고 런타임에서 리스트의 종류를 결정 할 수 있다.


    private final MyList<Integer> list;

    public BatchProcessor(MyList<Integer> list){
        this.list = list;
    }

    public void logic(int size) {
        long startTime = System.currentTimeMillis();
        for (int i = 0; i < size; i++) {
            list.add(0, i); //앞에 추가
        }
        long endTime = System.currentTimeMillis();
        System.out.println("크기: " + size + ", 계산 시간: " + (endTime -
startTime) + "ms");
    }


    //main() {
    //    new BatchProcessor(new MyArrayList()); //MyArrayList를 사용하고 싶을 때
    //    new BatchProcessor(new MyLinkedList()); //MyLinkedList를 사용하고 싶을 때
    //}

    // 위와 같이 메인코드에서 런타임일 때 리스트의 종류를 바꿀 수 있다.

} 


public class BatchProcessorMain {
    public static void main(String[] args) {
        MyArrayList<Integer> list = new MyArrayList<>();
        //MyLinkedList<Integer> list = new MyLinkedList<>();
        //연결 리스트로 바꾸고 싶으면 생성자로 타입을 정해 생성하고 Batch객체에 넣는다.

        BatchProcessor processor = new BatchProcessor(list);
        processor.logic(50000);

    }
}

가장 중요한게 의존관계 주입 DI개념이다 (dependency injection)

[컴파일 의존 관계]
    이 코드에서 Batchprocessor은 MyList에 의존하고 있다.
    MyArrayList와 MyLinkedList는 MyList에 의존하고 있다.
    하지만 코드에서는 BatchProcessor와 MyArrayList, MyLinkedList는 명시적으로 의존하고 있지않다
    쉽게 말해 코드에 implement나 extend를 사용하여 구현이나 상속을 받지 않고 있다는 것이다.
    이러한 코드에 적혀있는 의존관계를 컴파일 의존관계 라고한다.(컴파일에서는 Batch와 Linkd Array는 의존관계가 아니다)
    
[런타임 의존관계]
    런타임 의존관계는 실제 프로그램이 작동할 떄 보이는 의존관계이다.
    주로 생성된 인스턴스와 그것을 참조할 때 의존관계라 보면된다.
    이 코드에서는 BatchProcessor와 MyArrayList, MyLinkedList가 각각 프로그램 실행 중에
    의존관계를 형성하고 있다
    이러한 의존관계는 프로그램 실행 중 실시간으로 계속 변할 수 있다.    


[정리]
    MyList 인터페이스의 도입으로 같은 리스트구조를 사용하면서 원하는 구현을 변경할 수 있게되었다.
    만약 처음 생성자부터 MyList가 아닌 ArrayList나 LinkedList 둘 중에 하나로 생성을 해버린다면(명시적 의존관계로 한다면)
    리스트의 종류를 바꾸고 싶어지면 코드를 바꿔야한다 하지만 MyList라는 인터페이스로 생성을 한다면(추상적 의존관계로 한다면)
    코드를 바꾸지 않아도 된다
    이렇게 생성자를 통해 런타임 의존관계를 주입하는 것을 생성자 의존관계주입 또는 생성자 주입 이라고한다.
    ( 쉽게 말해 런타임 의존관계 즉 생성자 의존관계란 컴파일 시점에는 인터페이스나 추상 클래스 같은 역할에만 의존하고,
    실행 시점(main 등)에서 생성자 등을 통해 구체 클래스를 주입해 의존관계를 완성하는 것을
    생성자 의존관계 주입, 또는 런타임 의존관계 주입이라고 한다)

    클라이언트 클래스
 */

stack 문제와 queue 문제를 풀어보자
=======================================================================================================================================
[Stack 문제 1]

간단한 문제들
import java.util.ArrayDeque;
import java.util.Deque;

public class Test1 {

    public static void main(String[] args) {
        Deque<String> stack = new ArrayDeque<>(); Stack 보다는 Deque로 하는게 성능이 좋단다 왜그런지는 모르겠음
        stack.push("youtube.com");
        stack.push("google.com");
        stack.push("facebook.com");

        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
    }
}
[실행결과]
facebook.com
google.com
youtube.com

당연한 결과다 웹사이트를 방문하면 stack 형태로 캐시가 쌓이게 되는거다
=======================================================================================================================================
[Stack 문제 2]
뒤로가기 기능을 만들어보자


public class BrowserHistory {
    private Deque<String> stack = new ArrayDeque<>();

    public void visitPage(String website){
        stack.push(website);
        System.out.println("방문: " + website);
    }

    public String goBack(){
        stack.pop(); 스택에서 하나를 없앤다
        System.out.println("뒤로가기: "+ stack.peek()); 그 후 현재 페이지를 보기 위해 값을 가져오진 않고 조회만 하는 peek()을 사용한다.
        return stack.peek();

    }
}   


public class Test2 {
 public static void main(String[] args) {
 BrowserHistory browser = new BrowserHistory();

 // 사용자가 웹페이지를 방문하는 시나리오
 browser.visitPage("youtube.com");
 browser.visitPage("google.com");
 browser.visitPage("facebook.com");
 // 뒤로 가기 기능을 사용하는 시나리오
 String currentPage1 = browser.goBack();
 System.out.println("currentPage1 = " + currentPage1);
 String currentPage2 = browser.goBack();
 System.out.println("currentPage2 = " + currentPage2);
 }
}


[실행결과]
방문: youtube.com
방문: google.com
방문: facebook.com
뒤로가기: google.com
currentPage1 = google.com
뒤로가기: youtube.com
currentPage2 = youtube.com


=======================================================================================================================================
[Queue 문제]
그냥 프린트에 문서를 프린트하라고 에약을 걸어놓는거다 너무 쉽다

public class PrinterQueueTest {
    public static void main(String[] args) {
         Queue<String> printQueue = new ArrayDeque<>();

         printQueue.add("doc1");
         printQueue.add("doc2");
         printQueue.add("doc3");

        System.out.println(printQueue.poll());
        System.out.println(printQueue.poll());
        System.out.println(printQueue.poll());

    }
    
}


[실행결과]
 
doc1
doc2
doc3

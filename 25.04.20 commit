// 기본형과 참조형
class Data
{
    int value;
}

public class Main 
{
     public static void main(String[] args)
     {  
        // 기본형 메서드
        int a = 10;
        System.out.println("변경 전: " + a);    //a = 10
        varChange(a);                          //메서드로 값 변경
        System.out.println("변경 후: "+ a);     //a = 20 이 아니라 a=10이다 값을 복사해서 전달된 메서드 내에서 바뀐 값은 오리지널의 값을 변경하지 않는다.


        // 참조형 메서드
        Data dataA = new Data();
        dataA.value = 10;
        System.out.println("변경 전: "+dataA.value);    //value = 10;
        valueChange(dataA);                             //메서드로 값 변경    
        System.out.println("변경 후: "+ dataA.value);   // 기본형과 다르게 값이 바뀌었다 이유는 Data객체는 실제 값이 아니라 참조 값을 가지고 있기에 복사한 후 변경하면
                                                        // 복사된 참조값이 아닌 참조하고 있는 dataA의 값이 바뀌게 된다

        /*
        결론: 
        자바에서의 메서드의 매개변수는 항상 pass by value 이다 그 값이 참조형(메모리 주소)이든 기본형이든 상관 없이 전달된다.
        기본형: 메서드로 기본형 데이터를 전달하면 그 순간 매개변수와 원래 변수는 같은 값을 가지고 이는 다른 변수가 된다 즉 완전히 별개이다
                그래서 메서드 내부에서 매개변수로 전달 된 변수를 아무리 변경해도 원래 변수는 값을 유지한다
        참조형: 메서드로 참조형 데이터를 전달하면 실제 값이 아니라 참조형(메모리 주소)이 복사되어 전달된다 
                즉 매개 변수에서 복사된 참조형 변수와 원래 변수는 가르키는 객체가 같고 그 객체의 인스턴스를 변경하게 되면 
                실제로 인스턴스가 변경된다
        요약:
        기본형: 메서드로 값 변경 가능 <-> 참조형 메서드로 값 변경 가능
        */


     }

     static void valueChange(Data x)
     {
        x.value = 20;
     }

     static void varChange(int x)
     {
         x = 20;
     }
}




/*
 * 기본형과 참조형
 * 
 * 기본형: int, double, boolean 타입 같은 값을 실제로 저장하는 변수들
 * 참조형: 객체, 배열 등등 값이 들어있는(참조 주소)를 저장하는 변수들
 * 예외: string 또한 참조형이지만 많이 사용하므로 사용자 편의를 위해 기본형, 불변형 변수로 취급한다
 *  
 * 
 * [변수대입]
 * 대원칙: 자바는 항상 값을 복사해서 저장한다.
 * 기본형:
 * int a = 2;
 * int b = a; 
 * >> a,b는 별개이다 이후의 a의 값을 바꿔도 b에는 전혀 지장이없다.
 * 
 * 참조형:
 * Student s1 = new Student;
 * Student s2 = s1;
 * >> s1과 s2는 각각 다른 변수처럼 보이지만 실제로는 같은 객체를 공유하고 있다.
 *    이후 s1이 참조하는 객체를 수정한 후 s2에서 값을 전달 받으면 수정된 값을 전달 받는다.
 * 
 * [메서드 호출]
 * 코드에서.   
 * 
 *   
 * 
 * 
 */


